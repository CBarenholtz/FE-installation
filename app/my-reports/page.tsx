"use client"import { useState, useEffect } from "react"import { useRouter } from "next/navigation"import { Button } from "@/components/ui/button"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"import { Badge } from "@/components/ui/badge"import { ChevronLeft, FileText, Calendar, MapPin, Edit, Trash2, Plus } from "lucide-react"import { ReportManager } from "@/lib/report-manager"interface SavedReport {  id: string  customerName: string  propertyAddress: string  dateCreated: string  dateModified: string  installationCount: number  hasImages: boolean}export default function MyReportsPage() {  const router = useRouter()  const [savedReports, setSavedReports] = useState<SavedReport[]>([])  useEffect(() => {    loadSavedReports()  }, [])  const loadSavedReports = () => {    const reports = ReportManager.getSavedReports()    setSavedReports(reports)  }  const handleLoadReport = async (reportId: string) => {    try {      const loadingToast = document.createElement("div")      loadingToast.textContent = "Loading report..."      loadingToast.style.cssText =        "position: fixed; top: 20px; right: 20px; background: #333; color: white; padding: 12px 20px; border-radius: 6px; z-index: 1000;"      document.body.appendChild(loadingToast)      const success = ReportManager.loadSavedReport(reportId)      document.body.removeChild(loadingToast)      if (success) {        const successToast = document.createElement("div")        successToast.textContent = "Report loaded successfully!"        successToast.style.cssText =          "position: fixed; top: 20px; right: 20px; background: #10b981; color: white; padding: 12px 20px; border-radius: 6px; z-index: 1000;"        document.body.appendChild(successToast)        setTimeout(() => {          document.body.removeChild(successToast)          // Navigate back to main report page          router.push("/")        }, 1000)      } else {        throw new Error("Failed to load report data")      }    } catch (error) {      console.error("Error loading report:", error)      alert(        "Error loading report. The report data may be corrupted or missing. Please try again or contact support if the problem persists.",      )    }  }  const handleDeleteReport = (reportId: string) => {    if (confirm("Are you sure you want to delete this report? This action cannot be undone.")) {      ReportManager.deleteSavedReport(reportId)      loadSavedReports() // Refresh the list    }  }  const formatDate = (dateString: string) => {    return new Date(dateString).toLocaleDateString("en-US", {      year: "numeric",      month: "short",      day: "numeric",      hour: "2-digit",      minute: "2-digit",    })  }  return (    <div className="min-h-screen bg-gray-50">      <div className="max-w-6xl mx-auto p-6">        {/* Header */}        <div className="flex items-center justify-between mb-8">          <div className="flex items-center gap-4">            <Button variant="ghost" size="sm" onClick={() => router.push("/")} className="flex items-center gap-2">              <ChevronLeft className="h-4 w-4" />              Back to Generator            </Button>            <div>              <h1 className="text-3xl font-bold text-gray-900">My Reports</h1>              <p className="text-gray-600 mt-1">Manage your saved water installation reports</p>            </div>          </div>          <Button onClick={() => router.push("/")} className="flex items-center gap-2">            <Plus className="h-4 w-4" />            New Report          </Button>        </div>        {/* Reports Grid */}        {savedReports.length === 0 ? (          <div className="text-center py-12">            <FileText className="h-12 w-12 text-gray-400 mx-auto mb-4" />            <h3 className="text-lg font-medium text-gray-900 mb-2">No saved reports</h3>            <p className="text-gray-600 mb-6">Create your first report to get started</p>            <Button onClick={() => router.push("/")}>              <Plus className="h-4 w-4 mr-2" />              Create New Report            </Button>          </div>        ) : (          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">            {savedReports.map((report) => (              <Card key={report.id} className="hover:shadow-lg transition-shadow">                <CardHeader className="pb-3">                  <div className="flex items-start justify-between">                    <div className="flex-1">                      <CardTitle className="text-lg font-semibold text-gray-900 line-clamp-1">                        {report.customerName}                      </CardTitle>                      <CardDescription className="flex items-center gap-1 mt-1">                        <MapPin className="h-3 w-3" />                        <span className="line-clamp-1">{report.propertyAddress}</span>                      </CardDescription>                    </div>                  </div>                </CardHeader>                <CardContent className="pt-0">                  <div className="space-y-3">                    {/* Stats */}                    <div className="flex items-center gap-4 text-sm text-gray-600">                      <span>{report.installationCount} installations</span>                      {report.hasImages && (                        <Badge variant="secondary" className="text-xs">                          Has Images                        </Badge>                      )}                    </div>                    {/* Dates */}                    <div className="space-y-1 text-xs text-gray-500">                      <div className="flex items-center gap-1">                        <Calendar className="h-3 w-3" />                        <span>Created: {formatDate(report.dateCreated)}</span>                      </div>                      <div className="flex items-center gap-1">                        <Calendar className="h-3 w-3" />                        <span>Modified: {formatDate(report.dateModified)}</span>                      </div>                    </div>                    {/* Actions */}                    <div className="flex gap-2 pt-2">                      <Button size="sm" onClick={() => handleLoadReport(report.id)} className="flex-1">                        <Edit className="h-3 w-3 mr-1" />                        Edit                      </Button>                      <Button                        size="sm"                        variant="outline"                        onClick={() => handleDeleteReport(report.id)}                        className="text-red-600 hover:text-red-700 hover:bg-red-50"                      >                        <Trash2 className="h-3 w-3" />                      </Button>                    </div>                  </div>                </CardContent>              </Card>            ))}          </div>        )}      </div>    </div>  )}